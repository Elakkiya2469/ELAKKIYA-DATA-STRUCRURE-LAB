
#include <stdio.h>
#include <stdlib.h>

typedef struct Customer {
    int id;
    struct Customer* next;
} Customer;

typedef struct Queue {
    Customer* front;
    Customer* rear;
} Queue;

Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

void enqueue(Queue* q, int id) {
    Customer* temp = (Customer*)malloc(sizeof(Customer));
    temp->id = id;
    temp->next = NULL;
    if (q->rear == NULL) {
        q->front = q->rear = temp;
        return;
    }
    q->rear->next = temp;
    q->rear = temp;
}

void dequeue(Queue* q) {
    if (q->front == NULL) {
        printf("Queue is empty. No customers to serve.\n");
        return;
    }

    Customer* temp = q->front;
    printf("Serving customer with ID: %d\n", temp->id);
    q->front = q->front->next;

    if (q->front == NULL) {
        q->rear = NULL;
    }

    free(temp);
}
void displayQueue(Queue* q) {
    if (q->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    Customer* temp = q->front;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d ", temp->id);
        temp = temp->next;
    }
    printf("\n");
}

// Main function to simulate the bank queue
int main() {
    Queue* q = createQueue();

    // Simulate adding customers to the queue
    enqueue(q, 101);
    enqueue(q, 102);
    enqueue(q, 103);

    printf("Bank Queue Status:\n");
    displayQueue(q);

    // Simulate serving customers
    dequeue(q);
    displayQueue(q);

    dequeue(q);
    displayQueue(q);

    // Add another customer
    enqueue(q, 104);
    displayQueue(q);

    dequeue(q);
    displayQueue(q);

    dequeue(q);
    displayQueue(q);

    return 0;
}
