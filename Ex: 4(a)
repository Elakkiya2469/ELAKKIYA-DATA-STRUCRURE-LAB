
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100
typedef struct Stack {
    int items[MAX];
    int top;
} Stack;
void initStack(Stack* stack) {
    stack->top = -1;
}

int isEmpty(Stack* stack) {
    return stack->top == -1;
}

int isFull(Stack* stack) {
    return stack->top == MAX - 1;
}

void push(Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        return;
    }
    stack->items[++stack->top] = value;
}

int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack->items[stack->top--];
}

int evaluatePostfix(char* expression) {
    Stack stack;
    initStack(&stack);

    for (int i = 0; i < strlen(expression); i++) {
        if (expression[i] == ' ')
            continue;
            
        if (isdigit(expression[i])) {
            int num = 0;
            while (isdigit(expression[i])) {
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            i--;  
            push(&stack, num);
      }
        else {
            int val2 = pop(&stack);
            int val1 = pop(&stack);
            switch (expression[i]) {
                case '+': push(&stack, val1 + val2); break;
                case '-': push(&stack, val1 - val2); break;
                case '*': push(&stack, val1 * val2); break;
                case '/': push(&stack, val1 / val2); break;
                default: printf("Invalid operator encountered: %c\n", expression[i]);
            }
        }
    }

 
    return pop(&stack);
}

int main() {
    char expression[MAX];
    printf("Enter a postfix expression (e.g., '23 45 + 6 *'): ");
    fgets(expression, MAX, stdin);
    if (expression[strlen(expression) - 1] == '\n') {
        expression[strlen(expression) - 1] = '\0';
    }
    int result = evaluatePostfix(expression);
    printf("Result: %d\n", result);

    return 0;
}
